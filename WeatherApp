#my first python coding program 
# -*- coding: utf-8 -*-
import requests
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
import time  # 시간 측정을 위해 추가

class WeatherApp(App):
    def __init__(self):
        super().__init__()
        self.city = "Seoul"
        self.api_key = "9140e42cd5e61872dbf9ab4886f3a481"
        self.weather_label = Label(font_name="C:/Users/SKTelecom/Documents/AI 과정/weather_app/fonts/NanumGothic.ttf")

    def build(self):
        layout = BoxLayout(orientation='vertical')
        self.weather_label = Label(markup=True, font_name="C:/Users/SKTelecom/Documents/AI 과정/weather_app/fonts/NanumGothic.ttf")
        layout.add_widget(self.weather_label)
        self.check_weather()
        return layout

    def check_weather(self, dt=None):
        start_time = time.time()  # 측정 시작
        
        url = f"http://api.openweathermap.org/data/2.5/weather?q={self.city}&appid={self.api_key}&units=metric"
        try:
            response = requests.get(url)
            response.raise_for_status()
            weather_data = response.json()
            weather = weather_data['weather'][0]['main']
            icon_code = weather_data['weather'][0]['icon']
            temp = weather_data['main']['temp']
            temp_min = weather_data['main']['temp_min']
            temp_max = weather_data['main']['temp_max']
            message = self.get_weather_message(weather, temp, temp_min, temp_max, icon_code)
            self.weather_label.text = message
            
            end_time = time.time()  # 측정 종료
            print(f"날씨 정보 가져오기 및 처리 시간: {end_time - start_time:.3f}초")  # 수행 시간 출력
            
        except requests.exceptions.RequestException as e:
            self.weather_label.text = f"날씨 정보를 가져오는데 실패했습니다: {str(e)}"
        except KeyError as e:
            self.weather_label.text = f"날씨 데이터 형식 오류: {str(e)}"
        except Exception as e:
            self.weather_label.text = f"예기치 못한 오류 발생: {str(e)}"

    def get_weather_message(self, weather, temp, temp_min, temp_max, icon_code):
        weather_info = {
            'Clear': {
                'items': "선글라스, 자외선차단제, 모자",
                'warning': "자외선 지수가 높을 수 있으니 야외활동 시 주의하세요",
                'message': "맑은 날씨입니다",
                'status': "[맑음]"
            },
            'Clouds': {
                'items': "우산, 겉옷",
                'warning': "갑작스러운 비가 올 수 있으니 우산을 챙기세요",
                'message': "흐린 날씨입니다",
                'status': "[흐림]"
            },
            'Rain': {
                'items': "우산, 레인부츠, 비옷",
                'warning': "우산을 필수로 챙기시고, 미끄러운 길 조심하세요",
                'message': "비가 오고 있습니다",
                'status': "[비]"
            },
            'Snow': {
                'items': "우산, 방한용품, 미끄럼 방지 신발",
                'warning': "눈길 미끄러움 주의, 가급적 대중교통을 이용하세요",
                'message': "눈이 오고 있습니다",
                'status': "[눈]"
            },
            'Thunderstorm': {
                'items': "우산, 비옷",
                'warning': "천둥번개가 치니 야외활동을 자제하세요",
                'message': "천둥번개가 치고 있습니다",
                'status': "[천둥번개]"
            },
            'Mist': {
                'items': "마스크, 밝은색 옷",
                'warning': "안개로 인한 시야 확보가 어려울 수 있습니다",
                'message': "안개가 끼었습니다",
                'status': "[안개]"
            }
        }
        
        # 기온에 따른 추가 메시지
        temp_message = ""
        if temp >= 30:
            temp_message = "\n[color=#FF5722]• 폭염 주의! 충분한 수분 섭취가 필요합니다[/color]"
        elif temp <= 5:
            temp_message = "\n[color=#1976D2]• 한파 주의! 따뜻하게 입으세요[/color]"
        
        info = weather_info.get(weather, {
            'items': "일반 외출복",
            'warning': "특별한 주의사항 없음",
            'message': f"날씨: {weather}",
            'status': "[기타]"
        })
        
        return f"""[size=28][b][color=#1976D2]오늘의 날씨 안내 - 서울 {info['status']}[/color][/b][/size]

[size=24][color=#616161]최저 [b]{temp_min:.1f}°[/b] / 최고 [b]{temp_max:.1f}°[/b][/color][/size]

[size=26][color=#424242]{info['message']}[/color][/size]

[size=24][color=#2196F3][b]준비물[/b][/color]
[color=#424242]• {info['items']}[/color]

[size=24][color=#FF5722][b]주의사항[/b][/color]
[color=#424242]• {info['warning']}[/color]{temp_message}

[size=24][color=#0D47A1]현재 기온: [b]{temp:.1f}°[/b][/color][/size]"""

if __name__ == '__main__':
    WeatherApp().run() 


tags: #my first python #my first coding #my first coding app #weatherApp
